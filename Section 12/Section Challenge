#include <iostream>

using namespace std;

// Function prototype
void print (int const *array, size_t size);
int *apply_all (int *array1, size_t size1, int *array2, size_t size2);


int main() {
    
    const size_t array1_size {5};
    const size_t array2_size {3};
    
    int array1[] {1, 2, 3, 4, 5};
    int array2[] {10, 20, 30};
    
    cout << "Array 1: ";
    print(array1, array1_size);
    
    cout << "Array 2: ";
    print(array2, array2_size);
    
    int *results = apply_all(array1, array1_size, array2, array2_size);
    constexpr size_t results_size {array1_size * array2_size};
    
    cout << "Result: ";
    print(results, results_size);
    
    delete [] results; // dont forget to free up storage from the heap
    cout << endl;
    
    return 0;
    
}

void print (int const *array,size_t size) {
    cout <<  "[ ";
    for (size_t i{0}; i<size; i++)
        cout << array[i] << " ";
    cout << "]";
    cout << endl;
}

int *apply_all (int *array1, size_t size1, int *array2, size_t size2) {
    int *final_array {nullptr};
    final_array = new int[size1 * size2];
    int k{0};
    
    for (size_t i{0}; i < size2; i++)
        for (size_t j{0}; j < size1; j++)
            *(final_array + k++) = array1[j] * array2[i];
    
    return final_array;
}

/* 
 Lesson learnt after watching solution:
 1. If you do not need to modify anything, remember to use const
 2. Remeber to free up the heap using the delete keyword
 3. Use Variable names that are more useful. I.e. Instead of using k, use position
*/
