#include <iostream>
#include <vector>

using namespace std;

int main() {
    
    // Vectors - Dynamic array
    /* Declaring vectors
       #include <vector>
       vector <char> vowels; */
       
    // Accessing vector - same as array or use vector_name.at(element_index)
    // Using .push_back(element) add another element to the end of the vector
    
    // vector <char> vowels; - Empty, to add element need to use push back
    // vector <char> vowels (5); - 5 char long, all initialised to 0
    vector <char> vowels {'a', 'e', 'i', 'o', 'u'}; 
    cout << vowels[0] << endl;
    cout << vowels.at(4) << endl;
    
    // vector <int> test_scores (3, 100); - 3 elements in vector all initialised to 100
    vector <int> test_scores {100, 98, 89};
    // Array syntax
    cout << "\nTest Scores using array syntax" << endl;
    cout << test_scores[0] << endl;
    cout << test_scores[1] << endl;
    cout << test_scores[2] << endl;
    
    // Vector Syntax - will do bound checking
    cout << "\nTest Scores using vector syntax" << endl;
    cout << test_scores.at(0) << endl;
    cout << test_scores.at(1) << endl;
    cout << test_scores.at(2) << endl;
    
    // Similar to len function in python
    cout << "\nThere are " << test_scores.size() << " scored in the vector" << endl;
    
    cout << "\nEnter 3 test scores: ";
    cin >> test_scores.at(0);
    cin >> test_scores.at(1);
    cin >> test_scores.at(2);
    
    cout << "\nUpdated test scores: " << endl;
    
    cout << test_scores.at(0) << endl;
    cout << test_scores.at(1) << endl;
    cout << test_scores.at(2) << endl;
    
    // Adding element to vector
    cout << "\nEnter a test score to add to the vector: ";
    
    int score_to_add{0};
    cin >> score_to_add;
    
    test_scores.push_back(score_to_add);
    
    cout << "\nEnter one more test score to add to the vector: ";
    
    cin >> score_to_add;
    
    test_scores.push_back(score_to_add);
    
    cout << "\nTest scores are now: " << endl;
    
    cout << test_scores.at(0) << endl;
    cout << test_scores.at(1) << endl;
    cout << test_scores.at(2) << endl;
    cout << test_scores.at(3) << endl;
    cout << test_scores.at(4) << endl;
    
    cout << "\nThere are now " << test_scores.size() << " scores in the vector" << endl;
    
    // cout << "This should caused an exception!!" << test_scores.at(10) << endl; // bound check is done using .at 
    
    // Example of a 2D-Vector - vector of vector
    vector <vector<int>> movie_ratings {
        {1, 2, 3, 4},
        {1, 2, 4, 4},
        {1, 3, 4, 5}
    };
    
    cout << "\nHere are the movie rating for reviewer #1 using array syntax: " << endl;
    cout << movie_ratings[0][0] << endl;
    cout << movie_ratings[0][1] << endl;
    cout << movie_ratings[0][2] << endl;
    cout << movie_ratings[0][3] << endl;
    
    cout << "\nhere are the movie rating for reviewer #1 using vector syntax: " << endl;
    cout << movie_ratings.at(0).at(0) << endl;
    cout << movie_ratings.at(0).at(1) << endl;
    cout << movie_ratings.at(0).at(2) << endl;
    cout << movie_ratings.at(0).at(3) << endl;
    
    return 0;
    
}
