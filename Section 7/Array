#include <iostream>

using namespace std;

int main() {
    // Declaring an array: element_type array_name [constant number of elements];
    // Initialization: element_type array_name [constant number of elements] {init list};
    // Accessing array elements: array_name [element_index] - same as python
    
    char vowels [] {'a', 'e', 'i', 'o', 'u'}; // size of array not provided, automatically calculated
    cout << "\nThe first vowel is: " << vowels[0] << endl;
    cout << "The last vowel is: " << vowels[4] << endl;
    
    // cin >> vowels[5]; - this is out of bounds, size of array is fixed
    
    double hi_temps [] {90.1, 89.8, 77.5, 81.6};
    cout << "\nThe first high temperature is: " << hi_temps[0] << endl;
    
    hi_temps[0] = 100.7; // set the first element in the array to a different value, aka assignment statment
    cout << "The first high temperature is now: " << hi_temps[0] << endl;
    
    int test_scores [5] {}; // if array is not initialised, it will return all junk value
    
    cout << "\nFirst score at index 0: " << test_scores[0] << endl;
    cout << "Second score at index 1: " << test_scores[1] << endl;
    cout << "Third score at index 2: " << test_scores[2] << endl;
    cout << "Fourth score at index 3: " << test_scores[3] << endl;
    cout << "Fifth score at index 4: " << test_scores[4] << endl;
    
    cout << "\nEnter 5 test scores: ";
    cin >> test_scores[0];
    cin >> test_scores[1];
    cin >> test_scores[2];
    cin >> test_scores[3];
    cin >> test_scores[4];
    
    cout << "\nThe updated array is:" << endl;
    cout << "\nFirst score at index 0: " << test_scores[0] << endl;
    cout << "Second score at index 1: " << test_scores[1] << endl;
    cout << "Third score at index 2: " << test_scores[2] << endl;
    cout << "Fourth score at index 3: " << test_scores[3] << endl;
    cout << "Fifth score at index 4: " << test_scores[4] << endl;
    
    cout << "\nNotice what the value of the array name is: " << test_scores << endl;
    
    // Multidimensional Array: element_type array_name [dim1_size aka rows] [dim2_size aka columns]
    
    
    return 0;
    
}
